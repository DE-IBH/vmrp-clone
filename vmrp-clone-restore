#!/usr/bin/perl

# vmrp-clone - VMware Resource Pool Clone
#
# Authors:
#   Thomas Liske <liske@ibh.de>
#
# Copyright Holder:
#   2011 (C) IBH IT-Service GmbH [http://www.ibh.de/]
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use strict;
use warnings;

use VMware::VIRuntime;
use XML::Simple;

my %opts = (
   fn => {
      type => "=s",
      help => "XML resource pool config input filename (vmrp-clone)",
      required => 1,
   },
   lwpsslver => {
      type => "=i",
      help => "Disable/enable SSL certificate verification (LWP).",
      default => 0,
   },
);

Opts::add_options(%opts);
Opts::parse();
Opts::validate();

$ENV{'PERL_LWP_SSL_VERIFY_HOSTNAME'} = Opts::get_option('lwpsslver');

Util::connect();

$|++;

my $xs = XML::Simple->new(RootName => 'vmrp-clone', ForceArray => 0);
my $config = $xs->XMLin(Opts::get_option('fn'));

my @vm_clusters = @{Vim::find_entity_views(view_type => 'ClusterComputeResource')};

my $i;
do {
    print STDERR "\nSelect cluster:\n";
    print STDERR   "===============\n";

    $i = 0;
    foreach (@vm_clusters) {
	print STDERR " [", ++$i, "] ", $_->name, "\n";
    }

    print STDERR "\n> ";

    chomp($i = <>);
} while(!($i =~ /^\d+\s*$/) || int($i)<1 || int($i)>$#vm_clusters+1);
$i--;
my $cluster = $vm_clusters[$i];

my @rpools = ($cluster->resourcePool);
sub get_rpools($$) {
    my $rp = Vim::get_view(mo_ref => shift);
    my $ident = shift || '';
    my $name = $rp->name;

    print STDERR "[$#rpools]$ident $name\n";

    if(defined($rp->resourcePool)) {
	foreach my $crp (@{$rp->resourcePool}) {
	    push(@rpools, $crp);
	    &get_rpools($crp, "$ident ");
	}
    }
}

print STDERR "\nSelect restore root:\n";
print STDERR   "====================\n";

get_rpools($cluster->resourcePool, '');

print STDERR "\n";

do {
    print STDERR "> ";

    chomp($i = <>);
} while(!($i =~ /^\d+\s*$/) || int($i)<0 || int($i)>$#rpools);

my $rpool = $rpools[$i];

sub get_sharesinfo($) {
    my $alloc = shift;

    $alloc->{'shares.level'} eq 'custom' ?
	(
	    level => SharesLevel->new($alloc->{'shares.level'}),
	    shares => $alloc->{'shares.shares'},
	)
    :
	(
	    level => SharesLevel->new($alloc->{'shares.level'}),
	    shares => 0,
	)
    ;
}

sub get_rpspecs($) {
    my $cfg = shift;

    my $spec = ResourceConfigSpec->new(
	cpuAllocation => ResourceAllocationInfo->new(
	    limit => $cfg->{'cpuAllocation'}->{'limit'},
	    expandableReservation => $cfg->{'cpuAllocation'}->{'expandableReservation'},
	    reservation => $cfg->{'cpuAllocation'}->{'reservation'},
	    shares => SharesInfo->new(get_sharesinfo($cfg->{'cpuAllocation'})),
	),
	memoryAllocation => ResourceAllocationInfo->new(
	    limit => $cfg->{'memoryAllocation'}->{'limit'},
	    expandableReservation => $cfg->{'memoryAllocation'}->{'expandableReservation'},
	    reservation => $cfg->{'memoryAllocation'}->{'reservation'},
	    shares => SharesInfo->new(get_sharesinfo($cfg->{'memoryAllocation'})),
	),
    );
}

my $default_spec = ResourceConfigSpec->new(
	cpuAllocation => ResourceAllocationInfo->new(
	    limit => -1,
	    expandableReservation => 1,
	    reservation => 0,
	    shares => SharesInfo->new(
		level => SharesLevel->new('normal'),
		shares => 0,
	    ),
	),
	memoryAllocation => ResourceAllocationInfo->new(
	    limit => -1,
	    expandableReservation => 1,
	    reservation => 0,
	    shares => SharesInfo->new(
		level => SharesLevel->new('normal'),
		shares => 0,
	    ),
	),
);

sub set_childs($$$) {
    my $name = shift;
    my $rp = shift;
    my $cfg = shift;

    my $rp_view = Vim::get_view(mo_ref => $rp);
    unless(defined(eval {
	$rp_view->UpdateConfig(config => get_rpspecs($cfg));
	1;
    })) {
	print STDERR "Unable to set resource pool specification for '$name': $@\n";
    }

    foreach my $cname (keys %{$cfg->{'pools'}}) {
	my $r = $rp_view->CreateResourcePool(name => $cname, spec => $default_spec);
	&set_childs($cname, $r, $cfg->{'pools'}->{$cname});
    }
}

my ($name) = (keys %$config);
set_childs($name, $rpool, $config->{$name});

# disconnect from the server
Util::disconnect();
